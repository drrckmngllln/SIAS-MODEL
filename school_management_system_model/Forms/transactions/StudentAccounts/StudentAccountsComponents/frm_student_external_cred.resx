<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAACS
        CgAAAk1TRnQBSQFMAgEBAwEAASgBAAEoAQABIAEAASABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAGA
        AwABIAMAAQEBAAEgBgABQCIAA0sBjFj/A8EB8gMNAREkAAMjATNI/wOdAeccAAMNAQ9c/wMtATSgAAMG
        AQdo/wNWAaYgAFD/A0cBgBgAZP8DDwESnABw/wNUAaIcAFD/A8sB9RQAA44BmQj/A7EBugMsATMDLAEz
        AywBMwMsATMDLAEzAywBMwMsATMDLAEzAywBMwMsATMDLAEzAywBMwMsATMDLAEzAywBMwMsATMDLAEz
        AywBMwMsATMDgAGMCP8D5AHpmAADsQHtdP8DDgESFAADFwEfEP8DTQGREP8D2gH4A1IBnxD/A10BtQOf
        AegQ/xQAA/IB9Qj/VAAM/5QAAwYBB3j/A8IB8xQAAzABSgz/A5MB4wQAAzsBYwz/AxoBIwQAEP8IABD/
        FAAM/1QADP+UAANRAZt8/xQAA0IBdAz/A4gB3wQAAzoBYAz/AxgBIAQAEP8IABD/FAAM/1QADP+UAAOw
        Ae98/xQAA1EBngz/A4gB3wQAAzoBYAz/AxgBIAQAEP8IABD/FAAM/1QADP+UAID/FAADawHJDP8DiAHf
        BAADOgFgDP8DGAEgBAAQ/wgAEP8UAAz/VAAM/5QAPP8IAANMAY84/xQAA8IB8wz/A4gB3wQAAzoBYAz/
        AxgBIAQAEP8IABD/FAAM/1QADP+UADz/CAADGgEkOP8UABD/A4gB3wQAAzoBYAz/AxgBIAQAEP8IABD/
        AxYBHRAADP9UAAz/lAA8/wgAAxoBJDj/FAAQ/wOIAd8EAAM6AWAM/wMYASAEABD/CAAQ/wMuAUcQAAz/
        VAAM/5QAPP8IAAMaASQ4/xQAEP8DiAHfBAADOgFgDP8DGAEgBAAQ/wgAEP8DQgFyEAAM/yAAAx8BJAT/
        A+oB7gN+AYkDHQEiIAAM/5QAPP8IAAMaASQ4/xQAEP8DiAHfBAADOgFgDP8DGAEgBAAQ/wgAEP8DUQGc
        EAAM/yAAAwQBBRT/A+MB6BgADP+UADz/CAADGgEkOP8UABD/A4gB3wQAAzoBYAz/AxgBIAQAEP8IABD/
        A2kBxhAADP8kABj/A+MB6BQADP+UACT/AzMBUgMtAUQDLQFEAy0BRAMtAUQDJgE4DAADLQFEAy0BRAMt
        AUQDLQFEAy0BRANQAZkg/xQAEP8DiAHfBAADOgFgDP8DGAEgBAAQ/wgAEP8DvAHxEAAM/yQAHP8D4wHo
        EAAD6wHvCP+UACD/AxcBHzwAIP8QAAMVARwQ/wOIAd8EAAM6AWAM/wMYASAEABD/CAAU/xAADP8kAAPC
        Acoc/wPjAegMAAMJAQsDywHSAyMBKZQAIP8DPwFsPAAg/xAAAy4BRhD/A4gB3wQAAzoBYAz/AxgBIAQA
        EP8IABT/EAAM/yQAA1MBXSD/A+EB5qgAOP8D3QH5CAADEgEXOP8QAANBAXEQ/wOTAeMEAAM7AWMM/wMa
        ASMEABD/CAAU/xAADP8oAAO1Ab4g/wPjAeikADz/CAADGgEkOP8QAANRAZsU/wNMAZAQ/wPVAfcDUgGd
        EP8DXQG1A6AB6RT/EAAM/ywAA7UBviD/A+MB6KAAPP8IAAMaASQ4/xAAA2gBxVz/EAAM/zAAA7UBviD/
        A+MB6JwAPP8IAAMaASQ4/xAAAykBPgMtAUQDLQFEAy0BRAMtAUQDLQFEAy0BRAMtAUQDLQFEAy0BRAMt
        AUQDLQFEAy0BRAMtAUQDLQFEAy0BRAMtAUQDLQFEAy0BRAMtAUQDLQFEAy0BRAMtAUQDLQFEEAAM/zQA
        A7UBviD/A+MB6JgAPP8IAAMaASQ4/4AADP84AAO1Ab4g/wPjAeiUADz/CAADIwEyOP8IAAMuAUgDYQG7
        A2EBuwNhAbsDYQG7A2EBuwNhAbsDYQG7A2EBuwNhAbsDYQG7A2EBuwNhAbsDYQG7A2EBuwNhAbsDYQG7
        A2EBuwNhAbsDYQG7A2EBuwNhAbsDYQG7A2EBuwNhAbsDYQG7A2EBuwNaAa8IAAP1AfcI/zwAA7UBviD/
        A+MB6JAAPP8DNQFWAwIBAwPLAfU4/wgAcP8DFwEfBAADlgGhCP8DmQGkAx0BIgMdASIDHQEiAx0BIgMd
        ASIDHQEiAx0BIgMdASIDHQEiAx0BIgMdASIQAAO1Ab4c/wMeASOQAAPmAfx8/wgAcP8DGAEgCAA8/xAA
        A7UBvhT/Ax4BIwgAA98B5IgAA3QB0Hz/CABw/wMMAQ8IAAMWARo4/xQAA7UBvgz/Ax4BIwgAA/kB+wT/
        A+MB6IQAAzIBT3z/CAADQgFzbP8UAAMLAQ0DLAEzAywBMwMsATMDLAEzAywBMwMsATMDLAEzAywBMwMs
        ATMDLAEzAywBMwMDAQQYAAO4AcEE/wMcASEIAAP6AfwM/wPIAc+EAHj/A0sBjAwAA1EBmmD/A+YB/AMH
        AQlkAAMaAR8IAAP6AfwU/4QAA0EBcHT/LAADCgENBP8DqgHrGAADAgEDBP8D1QH3jAAD+gH8GP+IAANl
        AcJs/wMGAQgwAAj/AwUBBhQAA2MBvgT/AzcBWowAA7kBwhj/jAADQQFwYP8DsAHvOAADPwFsJP+UAAO4
        AcEQ/wNaAWWUAAMxAU0DcgHPA/UB/kT/A7EB7QNRAZwDBgEIQAADKQE9A5AB4hT/A1sBspwAAzEBOAPF
        AcwDuAHAAxMBF4QAAUIBTQE+BwABPgMAASgDAAGAAwABIAMAAQEBAAEBBgABAhYAA/8BAAHwAgABBwH8
        AgABPwGAAgABPwQAAcACAAEDAfwCAAEfAYACAAEfBAABwAIAAQEB/AIAAR8DAAEfBAABgAMAAfgCAAIf
        Av8BHwgAAfgBIAGGAh8C/wEfCAAB+AEgAYYCHwL/AR8IAAH4ASABhgIfAv8BHwgAAfgBIAGGAh8C/wEf
        BQABAQGAAQAB+AEgAYYCHwL/AR8FAAEBAYABAAH4ASABhgEPAR8C/wEfBQABAQGAAQAB+AEgAYYBDwEf
        Av8BHwUAAQEBgAEAAfgBIAGGAQ8BHwHgAf8BHwUAAQEBgAEAAfgBIAGGAQ8BHwHgAT8BHwUAAQEBgAEA
        AfgBIAGGAQ8BHwHwAh8FAAEBAcABAAH4ASABhgEPAR8B8AEPAR8FAAF/Af8BAAHwASABhgEPAR8B8AEH
        AR8FAAF/Af8BAAHwASABhgEPAR8B8AEDAf8FAAEBAYABAAHwASABhgEPAR8B+AEBAf8FAAEBAYABAAHw
        AgABDwEfAfwBAAH/BQABAQGAAQAB8AIAAQ8BHwH+AQABfwUAAQEBgAEAAfACAAEPAR8B/wEAAT8FAAEB
        AYABAAT/AR8B/wGAAR8FAAEBAYABAAHAAgABAwEfAf8BwAEPCAABwAIAAQEBAAEBAeABDwgAAcACAAEB
        AYABAAHwARsIAAHAAgABAQGAAQAB+AExCAABwAIAAQMB4AEAAfwBYAQAAYADAAHgAgABAwL/Af4BwAQA
        AYACAAEBAf8BxwHjBP8BgAQAAcACAAEBAf8C4wT/AYAEAAHgAgABBwH/AeABBwT/AcAEAAH4AgABDwH/
        AfABDwT/AeEEAAs=
</value>
  </data>
</root>